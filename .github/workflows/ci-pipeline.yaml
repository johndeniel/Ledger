name: CI Pipeline

# Trigger conditions: run pipeline only for changes to Java source or Maven config
on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'pom.xml'
      - '.github/**'
  pull_request:
    branches: [main]
    paths:
      - 'src/**'
      - 'pom.xml'
      - '.github/**'

# Enhanced permissions for Pages deployment
permissions:
  contents: read
  checks: write
  pull-requests: write
  actions: read
  pages: write
  id-token: write

# Global environment variables
env:
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'temurin'
  MAVEN_OPTS: '-Dmaven.repo.local=.m2/repository -Xmx1024m -XX:+UseG1GC'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 15

    outputs:
      artifact-name: ${{ steps.build-info.outputs.artifact-name }}
      version: ${{ steps.build-info.outputs.version }}

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Set up JDK
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      # Step 3: Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml', '.mvn/wrapper/maven-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Download dependencies
      - name: Download dependencies
        run: mvn dependency:resolve --batch-mode --no-transfer-progress

      # Step 5: Validate and compile
      - name: Validate and compile
        run: |
          mvn validate --batch-mode --no-transfer-progress
          mvn compile --batch-mode --no-transfer-progress

      # Step 6: Run unit tests with coverage and generate HTML reports
      - name: Run unit tests with coverage and generate reports
        run: |
          mvn clean test jacoco:report --batch-mode --no-transfer-progress
          # Generate HTML Surefire report
          mvn surefire-report:report-only --batch-mode --no-transfer-progress
          # Generate Allure report if configured
          if mvn help:describe -Dplugin=io.qameta.allure:allure-maven -Ddetail=false -q >/dev/null 2>&1; then
            mvn allure:report --batch-mode --no-transfer-progress
          fi
        env:
          MAVEN_OPTS: ${{ env.MAVEN_OPTS }}

      # Step 7: Build application package
      - name: Build application package
        run: mvn package --batch-mode --no-transfer-progress -DskipTests

      # Step 8: Extract build information
      - name: Extract build information
        id: build-info
        run: |
          ARTIFACT_ID=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "artifact-name=${ARTIFACT_ID}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      # Step 9: Display Surefire Test Results in Checks Tab
      - name: Publish Surefire Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: "📋 Surefire Test Results"
          path: target/surefire-reports/*.xml
          reporter: java-junit
          fail-on-error: false
          max-annotations: 50

      # Step 10: Display JaCoCo Coverage in PR Comments
      - name: Add JaCoCo Coverage to PR
        if: github.event_name == 'pull_request'
        uses: madrapps/jacoco-report@v1.6.1
        with:
          paths: target/site/jacoco/jacoco.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 40
          min-coverage-changed-files: 60
          title: "📊 JaCoCo Code Coverage Report"
          update-comment: true

      # Step 11: Setup Pages (Required for deployment)
      - name: Setup Pages
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/configure-pages@v4

      # Step 12: Create professional production dashboard
      - name: Create Production Quality Dashboard
        if: always()
        run: |
          mkdir -p docs/reports
          
          # Get current stats for dashboard
          if [ -d "target/surefire-reports" ] && [ "$(ls -A target/surefire-reports)" ]; then
            TEST_COUNT=$(find target/surefire-reports -name "*.xml" -exec grep -c "<testcase" {} + 2>/dev/null | awk '{sum+=$1} END {print sum+0}')
            FAILURE_COUNT=$(find target/surefire-reports -name "*.xml" -exec grep -o 'failures="[0-9]*"' {} + 2>/dev/null | grep -o '[0-9]*' | awk '{sum+=$1} END {print sum+0}')
            SUCCESS_COUNT=$((TEST_COUNT - FAILURE_COUNT))
            SUCCESS_RATE=$(awk "BEGIN {printf \"%.1f\", $SUCCESS_COUNT*100/$TEST_COUNT}" 2>/dev/null || echo "0.0")
          else
            TEST_COUNT=0; SUCCESS_COUNT=0; FAILURE_COUNT=0; SUCCESS_RATE="0.0"
          fi
          
          # Get coverage percentage
          if [ -f "target/site/jacoco/index.html" ]; then
            COVERAGE=$(grep -o "Total[^%]*%" target/site/jacoco/index.html | tail -1 | grep -o "[0-9]*%" || echo "N/A")
          else
            COVERAGE="N/A"
          fi
          
          # Generate dashboard using external template
          ./scripts/generate-dashboard.sh "${{ github.run_number }}" "${{ github.sha }}" "${SUCCESS_COUNT}" "${FAILURE_COUNT}" "${TEST_COUNT}" "${SUCCESS_RATE}" "${COVERAGE}"
          
          # Copy reports to appropriate locations
          if [ -d "target/site/jacoco" ]; then
            cp -r target/site/jacoco docs/reports/
            echo "✅ Copied JaCoCo coverage reports"
          fi
          
          if [ -d "target/allure-report" ]; then
            cp -r target/allure-report docs/reports/
            echo "✅ Copied Allure test reports"
          fi
          
          echo "📁 Dashboard structure created successfully"

      # Step 13: Upload Pages artifact
      - name: Upload Pages artifact
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs

      # Step 14: Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: deployment
        uses: actions/deploy-pages@v4

      # Step 15: Generate quality metrics summary
      - name: Generate Quality Dashboard Summary
        if: always()
        run: |
          echo "## 🔍 Quality Assurance Dashboard" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.ref }}" == "refs/heads/main" ] && [ "${{ github.event_name }}" == "push" ]; then
            PAGES_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
            echo "### 🌐 Live Quality Dashboard" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🔍 **[View Quality Dashboard](${PAGES_URL})** - Complete quality analysis" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📊 Direct Access" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Report | Link | Coverage |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|------|----------|" >> $GITHUB_STEP_SUMMARY
            echo "| **JaCoCo Coverage** | [📊 View Report](${PAGES_URL}/reports/jacoco/) | ${COVERAGE} |" >> $GITHUB_STEP_SUMMARY
            echo "| **Allure Reports** | [✨ View Report](${PAGES_URL}/reports/allure-report/) | Interactive |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🔗 **Dashboard URL**: ${PAGES_URL}" >> $GITHUB_STEP_SUMMARY
          else
            echo "### 📋 Test Results Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Test results are available in the **Checks** tab above." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "_Quality dashboard is deployed from main branch builds._" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📈 Quality Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "target/surefire-reports" ] && [ "$(ls -A target/surefire-reports)" ]; then
            echo "- ✅ **Passed**: ${SUCCESS_COUNT} tests" >> $GITHUB_STEP_SUMMARY
            echo "- ❌ **Failed**: ${FAILURE_COUNT} tests" >> $GITHUB_STEP_SUMMARY
            echo "- 📊 **Total**: ${TEST_COUNT} tests" >> $GITHUB_STEP_SUMMARY
            echo "- 📈 **Success Rate**: ${SUCCESS_RATE}%" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f "target/site/jacoco/index.html" ]; then
            echo "- 🎯 **Code Coverage**: ${COVERAGE}" >> $GITHUB_STEP_SUMMARY
          fi

      # Step 16: Upload artifacts as fallback
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: application-jar-${{ github.run_number }}
          path: target/*.jar
          retention-days: 7

      # Step 17: Cleanup on failure
      - name: Cleanup on failure
        if: failure()
        run: rm -rf ~/.m2/repository/com ~/.m2/repository/org || true

  # Separate job for Pages deployment to avoid permission issues
  deploy-pages:
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    permissions:
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4