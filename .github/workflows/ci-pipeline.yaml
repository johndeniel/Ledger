name: Production CI/CD Pipeline

# Trigger conditions: run pipeline only for changes to Java source or Maven config
on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'pom.xml'
      - '.github/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'pom.xml'
      - '.github/**'

# Enhanced permissions for comprehensive CI/CD operations
permissions:
  contents: read
  checks: write
  pull-requests: write
  actions: read
  pages: write
  id-token: write

# Global environment variables for consistent configuration
env:
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'temurin'
  MAVEN_OPTS: '-Xmx2048m -XX:+UseG1GC -XX:MaxMetaspaceSize=512m -Dmaven.artifact.threads=1C'
  MIN_COVERAGE_OVERALL: 40
  MIN_COVERAGE_CHANGED_FILES: 60
  CACHE_VERSION: v2

# Concurrency control to prevent resource conflicts
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # =================================================================
  # STAGE 1: Source Code Preparation & Environment Setup
  # =================================================================
  checkout-and-setup:
    name: 📥 Checkout & Setup
    runs-on: ubuntu-latest
    timeout-minutes: 8
    
    outputs:
      java-version: ${{ env.JAVA_VERSION }}
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
      pom-hash: ${{ steps.cache-keys.outputs.pom-hash }}
      
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔑 Generate Cache Keys
        id: cache-keys
        run: |
          POM_HASH=$(find . -name "pom.xml" -exec sha256sum {} \; | sha256sum | cut -d' ' -f1)
          echo "pom-hash=${POM_HASH}" >> $GITHUB_OUTPUT
          echo "📋 Generated POM hash: ${POM_HASH}"

      - name: ☕ Setup JDK with Enhanced Caching
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: maven

      - name: 🗄️ Cache Maven Dependencies (Fixed)
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            target/dependency-cache
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-maven-${{ steps.cache-keys.outputs.pom-hash }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-${{ runner.os }}-maven-
            v1-${{ runner.os }}-maven-

      - name: 📦 Resolve Dependencies (Parallel)
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          echo "🔍 Resolving Maven dependencies in parallel..."
          mkdir -p target/dependency-cache
          
          # Resolve all dependencies in parallel
          mvn dependency:resolve dependency:sources dependency:resolve-plugins \
            --batch-mode --no-transfer-progress --quiet -T 2C \
            -Dmaven.resolver.transport=wagon
          
          # Cache dependency tree for faster subsequent builds
          mvn dependency:tree --batch-mode --no-transfer-progress --quiet > target/dependency-cache/dep-tree.txt
          
          echo "✅ All dependencies resolved successfully"

      - name: 🔍 Validate Project Structure
        run: |
          echo "🔍 Validating project structure..."
          mvn validate --batch-mode --no-transfer-progress --quiet
          echo "✅ Project validation completed"

  # =================================================================
  # STAGE 2: Build & Compilation
  # =================================================================
  build:
    name: 🔨 Build & Compile
    runs-on: ubuntu-latest
    timeout-minutes: 12
    needs: checkout-and-setup
    
    outputs:
      artifact-name: ${{ steps.build-info.outputs.artifact-name }}
      version: ${{ steps.build-info.outputs.version }}
      group-id: ${{ steps.build-info.outputs.group-id }}
      
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ☕ Setup JDK with Cache
        uses: actions/setup-java@v4
        with:
          java-version: ${{ needs.checkout-and-setup.outputs.java-version }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: maven

      - name: 🗄️ Restore Maven Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            target/dependency-cache
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-maven-${{ needs.checkout-and-setup.outputs.pom-hash }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-${{ runner.os }}-maven-
            v1-${{ runner.os }}-maven-

      - name: 🔨 Compile Sources (Parallel)
        run: |
          echo "🔨 Compiling sources in parallel..."
          mvn compile test-compile --batch-mode --no-transfer-progress --quiet -T 2C \
            -Dmaven.compiler.useIncrementalCompilation=true
          echo "✅ Compilation completed successfully"

      - name: 📋 Extract Build Information
        id: build-info
        run: |
          echo "📋 Extracting project metadata..."
          
          ARTIFACT_ID=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout --batch-mode)
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout --batch-mode)  
          GROUP_ID=$(mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout --batch-mode)
          
          if [[ -z "$ARTIFACT_ID" || -z "$VERSION" || "$ARTIFACT_ID" == *"WARNING"* || "$VERSION" == *"WARNING"* ]]; then
            echo "❌ ERROR: Failed to extract clean project information"
            exit 1
          fi
          
          echo "✅ Project Information:"
          echo "  📦 Group ID: $GROUP_ID"
          echo "  🏷️ Artifact ID: $ARTIFACT_ID" 
          echo "  🔖 Version: $VERSION"
          
          echo "artifact-name=${ARTIFACT_ID}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "group-id=${GROUP_ID}" >> $GITHUB_OUTPUT

      - name: 💾 Cache Compiled Classes
        uses: actions/cache@v4
        with:
          path: |
            target/classes/
            target/test-classes/
            target/maven-status/
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-compiled-${{ github.sha }}-${{ needs.checkout-and-setup.outputs.pom-hash }}

      - name: 📤 Upload Compiled Classes
        uses: actions/upload-artifact@v4
        with:
          name: compiled-classes-${{ github.run_number }}
          path: |
            target/classes/
            target/test-classes/
            pom.xml
          retention-days: 1

  # =================================================================
  # STAGE 3: Testing & Quality Analysis (FIXED)
  # =================================================================
  test:
    name: 🧪 Test & Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 18
    needs: [checkout-and-setup, build]
    
    outputs:
      reports-ready: ${{ steps.check-reports.outputs.reports-exist }}
      coverage-percentage: ${{ steps.coverage-info.outputs.coverage }}
      test-count: ${{ steps.test-count.outputs.test-count }}
      
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ☕ Setup JDK with Cache
        uses: actions/setup-java@v4
        with:
          java-version: ${{ needs.checkout-and-setup.outputs.java-version }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: maven

      - name: 🗄️ Restore Maven Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            target/dependency-cache
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-maven-${{ needs.checkout-and-setup.outputs.pom-hash }}

      - name: 💾 Restore Compiled Classes
        uses: actions/cache@v4
        with:
          path: |
            target/classes/
            target/test-classes/
            target/maven-status/
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-compiled-${{ github.sha }}-${{ needs.checkout-and-setup.outputs.pom-hash }}

      - name: 🧪 Run Tests with Coverage Analysis (FIXED)
        run: |
          echo "🧪 Starting comprehensive test execution..."
          mvn clean test jacoco:report --batch-mode --no-transfer-progress -T 1C \
            -Dmaven.test.failure.ignore=false \
            -Dspring.profiles.active=test
          echo "✅ Test execution and coverage analysis completed successfully"
        env:
          MAVEN_OPTS: ${{ env.MAVEN_OPTS }}

      - name: 📈 Generate Allure Interactive Reports
        run: |
          echo "🎯 Checking for Allure plugin configuration..."
          if mvn help:describe -Dplugin=io.qameta.allure:allure-maven -Ddetail=false -q >/dev/null 2>&1; then
            echo "📈 Generating Allure interactive reports..."
            mvn allure:report --batch-mode --no-transfer-progress --quiet
            echo "✅ Allure reports generated successfully"
            if [ -d "target/allure-report" ]; then
              echo "✅ Allure report directory exists"
              ls -la target/allure-report/
            else
              echo "⚠️ Allure report directory not found"
            fi
          else
            echo "ℹ️ Allure plugin not configured - skipping interactive reports"
          fi

      - name: 🧪 Generate Surefire Test Reports
        run: |
          echo "📊 Generating Surefire test reports..."
          mvn surefire-report:report-only --batch-mode --no-transfer-progress --quiet
          
          if [ -f "target/site/surefire-report.html" ]; then
            echo "✅ Surefire HTML reports generated successfully"
            ls -la target/site/
          else
            echo "⚠️ Surefire HTML report not found - generating site reports..."
            mvn site -DgenerateReports=true --batch-mode --no-transfer-progress --quiet
            if [ -f "target/site/surefire-report.html" ]; then
              echo "✅ Surefire HTML reports generated via site goal"
            else
              echo "ℹ️ Surefire HTML report not available"
              echo "Files in target/site/:"
              ls -la target/site/ 2>/dev/null || echo "No target/site directory found"
              echo "Files in target/surefire-reports/:"
              ls -la target/surefire-reports/ 2>/dev/null || echo "No target/surefire-reports directory found"
            fi
          fi
          echo "✅ Test report generation completed successfully"

      - name: 📊 Generate JaCoCo Coverage Reports (FIXED)
        id: coverage-info
        run: |
          echo "📊 Verifying JaCoCo coverage data and generating reports..."
          
          # Check if jacoco.exec exists and has data
          if [ -f "target/jacoco.exec" ]; then
            EXEC_SIZE=$(stat -c%s "target/jacoco.exec" 2>/dev/null || echo "0")
            echo "📋 JaCoCo execution data file size: ${EXEC_SIZE} bytes"
            
            if [ "$EXEC_SIZE" -gt "0" ]; then
              echo "✅ JaCoCo execution data found, generating coverage reports..."
              mvn jacoco:report --batch-mode --no-transfer-progress --quiet
              
              if [ -f "target/site/jacoco/index.html" ]; then
                echo "✅ JaCoCo coverage reports generated successfully"
                
                # Enhanced coverage extraction with multiple fallback methods
                COVERAGE="0%"
                
                # Method 1: Try to extract from HTML
                if [ -f "target/site/jacoco/index.html" ]; then
                  COVERAGE=$(grep -oP 'Total[^<]*?(\d+)%' target/site/jacoco/index.html 2>/dev/null | tail -1 | grep -oP '\d+%' || echo "")
                fi
                
                # Method 2: Try alternative HTML parsing
                if [ -z "$COVERAGE" ] || [ "$COVERAGE" = "" ]; then
                  COVERAGE=$(grep -o "Total.*[0-9]\+%" target/site/jacoco/index.html 2>/dev/null | sed 's/.*\([0-9]\+%\).*/\1/' | tail -1 || echo "")
                fi
                
                # Method 3: Check CSV report if available
                if [ -z "$COVERAGE" ] || [ "$COVERAGE" = "" ]; then
                  mvn jacoco:report -Dformat=csv --batch-mode --no-transfer-progress --quiet 2>/dev/null || true
                  if [ -f "target/site/jacoco/jacoco.csv" ]; then
                    # Extract coverage from CSV (instruction coverage)
                    TOTAL_MISSED=$(tail -1 target/site/jacoco/jacoco.csv | cut -d',' -f4)
                    TOTAL_COVERED=$(tail -1 target/site/jacoco/jacoco.csv | cut -d',' -f5)
                    if [ -n "$TOTAL_MISSED" ] && [ -n "$TOTAL_COVERED" ] && [ "$TOTAL_MISSED" != "INSTRUCTION_MISSED" ]; then
                      TOTAL=$((TOTAL_MISSED + TOTAL_COVERED))
                      if [ "$TOTAL" -gt "0" ]; then
                        COVERAGE_NUM=$((TOTAL_COVERED * 100 / TOTAL))
                        COVERAGE="${COVERAGE_NUM}%"
                      fi
                    fi
                  fi
                fi
                
                # Fallback: Set to 0% if still empty
                if [ -z "$COVERAGE" ] || [ "$COVERAGE" = "" ]; then
                  COVERAGE="0%"
                fi
                
                echo "🎯 Overall Code Coverage: ${COVERAGE}"
                echo "coverage=${COVERAGE}" >> $GITHUB_OUTPUT
                
                # Debug information
                echo "📋 Coverage report files:"
                ls -la target/site/jacoco/ 2>/dev/null || echo "No jacoco directory found"
              else
                echo "⚠️ JaCoCo HTML report not generated despite execution data"
                echo "coverage=0%" >> $GITHUB_OUTPUT
              fi
            else
              echo "⚠️ JaCoCo execution data file is empty - no tests were executed or instrumented"
              echo "coverage=0%" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️ JaCoCo execution data file not found - coverage instrumentation may not be configured"
            echo "coverage=0%" >> $GITHUB_OUTPUT
          fi

      - name: 🔢 Count Test Suites
        id: test-count
        run: |
          echo "🔢 Counting test suites..."
          if [ -d "target/surefire-reports" ] && [ "$(ls -A target/surefire-reports 2>/dev/null)" ]; then
            TEST_COUNT=$(ls target/surefire-reports/*.xml 2>/dev/null | wc -l)
            echo "✅ Found $TEST_COUNT test suites"
            echo "test-count=${TEST_COUNT}" >> $GITHUB_OUTPUT
          else
            echo "⚠️ No test reports found"
            echo "test-count=0" >> $GITHUB_OUTPUT
          fi

      - name: 🔍 Validate All Reports
        id: check-reports
        run: |
          echo "🔍 Validating all generated reports..."
          
          REPORTS_EXIST=false
          
          # Check Surefire reports
          if [ -d "target/surefire-reports" ] && [ "$(ls -A target/surefire-reports/*.xml 2>/dev/null)" ]; then
            echo "✅ Surefire XML reports found"
            REPORTS_EXIST=true
          else
            echo "⚠️ Surefire XML reports missing"
          fi
          
          # Check JaCoCo reports
          if [ -f "target/site/jacoco/index.html" ]; then
            echo "✅ JaCoCo coverage reports found"
          else
            echo "⚠️ JaCoCo coverage reports missing"
          fi
          
          # Check Allure reports
          if [ -d "target/allure-report" ] && [ -f "target/allure-report/index.html" ]; then
            echo "✅ Allure interactive reports found"
          else
            echo "ℹ️ Allure reports not generated (plugin may not be configured)"
          fi
          
          # Check Surefire HTML reports
          if [ -f "target/site/surefire-report.html" ]; then
            echo "✅ Surefire HTML reports found"
          else
            echo "⚠️ Surefire HTML reports missing"
          fi
          
          echo "reports-exist=${REPORTS_EXIST}" >> $GITHUB_OUTPUT

      - name: 💾 Cache Test Reports
        uses: actions/cache@v4
        with:
          path: |
            target/site/
            target/surefire-reports/
            target/allure-report/
            target/jacoco.exec
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-reports-${{ github.sha }}-${{ github.run_number }}

      - name: 📋 Publish Test Results
        uses: dorny/test-reporter@v1
        if: always() && steps.check-reports.outputs.reports-exist == 'true'
        with:
          name: "📋 Surefire Test Reports"
          path: "target/surefire-reports/*.xml"
          reporter: java-junit
          fail-on-error: false
          max-annotations: 50
          only-summary: false

      - name: 📤 Upload Test Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports-${{ github.run_number }}
          path: |
            target/site/
            target/surefire-reports/
            target/allure-report/
            target/jacoco.exec
          retention-days: 7
          if-no-files-found: warn

  # =================================================================
  # STAGE 4: Package & Artifact Creation
  # =================================================================
  package:
    name: 📦 Package & Artifacts
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [checkout-and-setup, build, test]
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: ☕ Setup JDK with Cache
        uses: actions/setup-java@v4
        with:
          java-version: ${{ needs.checkout-and-setup.outputs.java-version }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: maven

      - name: 🗄️ Restore Maven Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            target/dependency-cache
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-maven-${{ needs.checkout-and-setup.outputs.pom-hash }}

      - name: 💾 Restore Compiled Classes
        uses: actions/cache@v4
        with:
          path: |
            target/classes/
            target/test-classes/
            target/maven-status/
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-compiled-${{ github.sha }}-${{ needs.checkout-and-setup.outputs.pom-hash }}

      - name: 📦 Build Application Package (Optimized)
        run: |
          echo "📦 Building application package..."
          mvn package --batch-mode --no-transfer-progress --quiet -T 1C \
            -DskipTests -Djacoco.skip=true \
            -Dmaven.javadoc.skip=true \
            -Dmaven.source.skip=true
          
          if ls target/*.jar 1> /dev/null 2>&1; then
            echo "✅ Application JAR built successfully:"
            for jar in target/*.jar; do
              if [[ -f "$jar" ]]; then
                JAR_SIZE=$(stat -c%s "$jar" 2>/dev/null || echo "0")
                JAR_SIZE_HUMAN=$(numfmt --to=iec "$JAR_SIZE" 2>/dev/null || echo "Unknown")
                echo "  📄 $(basename "$jar") - ${JAR_SIZE_HUMAN}"
              fi
            done
          else
            echo "❌ ERROR: No JAR files found in target directory"
            exit 1
          fi

      - name: 📤 Upload Application Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact-name }}-${{ needs.build.outputs.version }}-${{ github.run_number }}
          path: |
            target/*.jar
            !target/*-sources.jar
            !target/*-javadoc.jar
          retention-days: 30

  # =================================================================
  # STAGE 5: Deployment Preparation & Pages Setup
  # =================================================================
  prepare-deployment:
    name: 🚀 Prepare Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [build, test, package]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 💾 Restore Cached Reports
        uses: actions/cache@v4
        with:
          path: |
            target/site/
            target/surefire-reports/
            target/allure-report/
            target/jacoco.exec
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-reports-${{ github.sha }}-${{ github.run_number }}

      - name: 📥 Download Test Reports (Fallback)
        if: failure()
        uses: actions/download-artifact@v4
        with:
          name: test-reports-${{ github.run_number }}
          path: ./target/

      - name: 📁 Prepare Reports for Pages (Optimized)
        run: |
          echo "📁 Preparing reports for GitHub Pages deployment..."
          mkdir -p docs/reports
          
          # Capture current UTC date
          CURRENT_DATE=$(date -u +"%Y-%m-%d %H:%M UTC")
          TEST_COUNT="${{ needs.test.outputs.test-count }}"
          COVERAGE="${{ needs.test.outputs.coverage-percentage }}"
          ARTIFACT_NAME="${{ needs.build.outputs.artifact-name }}"
          VERSION="${{ needs.build.outputs.version }}"

          # Ensure TEST_COUNT and COVERAGE have fallback values
          TEST_COUNT=${TEST_COUNT:-0}
          COVERAGE=${COVERAGE:-0%}

          cat > docs/index.html << EOF
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Project Reports</title>
            <style>
              body { font-family: -apple-system, system-ui, sans-serif; max-width: 800px; margin: 2rem auto; padding: 1rem; }
              .report-list { list-style: none; padding: 0; }
              .report-list li { margin: 1rem 0; padding: 1rem; border: 1px solid #ddd; border-radius: 8px; }
              .report-list a { text-decoration: none; color: #0366d6; font-weight: 500; }
              .report-list a:hover { text-decoration: underline; }
              .description { color: #586069; margin-top: 0.5rem; }
              .summary { background: #f6f8fa; padding: 1rem; border-radius: 8px; margin-bottom: 2rem; }
            </style>
          </head>
          <body>
            <h1>📊 Project Quality Reports</h1>
            <div class="summary">
              <h2>Build Summary</h2>
              <p><strong>Artifact:</strong> ${ARTIFACT_NAME}-${VERSION}</p>
              <p><strong>Test Suites Executed:</strong> ${TEST_COUNT}</p>
              <p><strong>Overall Coverage:</strong> ${COVERAGE}</p>
              <p><strong>Generated:</strong> Build #${{ github.run_number }} • ${CURRENT_DATE}</p>
            </div>
            <ul class="report-list">
              <li>
                <a href="reports/allure-report/index.html">✨ Interactive Test Report (Allure)</a>
                <div class="description">Rich interactive test reports with trends and detailed analytics</div>
              </li>
              <li>
                <a href="reports/jacoco/index.html">🎯 Code Coverage Report (JaCoCo)</a>
                <div class="description">Detailed code coverage analysis with line and branch coverage metrics</div>
              </li>
              <li>
                <a href="reports/surefire-report.html">🧪 Test Execution Report (Surefire)</a>
                <div class="description">Comprehensive test results with execution times and failure details</div>
              </li>
            </ul>
            <footer style="margin-top: 2rem; padding-top: 1rem; border-top: 1px solid #eee; color: #586069;">
              <p>Generated by GitHub Actions • Build #${{ github.run_number }} • ${CURRENT_DATE}</p>
            </footer>
          </body>
          </html>
          EOF

          # Replace placeholders efficiently
          sed -i "s/ARTIFACT_NAME_PLACEHOLDER/${ARTIFACT_NAME}/g" docs/index.html
          sed -i "s/VERSION_PLACEHOLDER/${VERSION}/g" docs/index.html
          sed -i "s/TEST_COUNT_PLACEHOLDER/${TEST_COUNT}/g" docs/index.html
          sed -i "s/COVERAGE_PLACEHOLDER/${COVERAGE}/g" docs/index.html
          sed -i "s/BUILD_NUMBER_PLACEHOLDER/${{ github.run_number }}/g" docs/index.html
          sed -i "s/DEPLOY_TIME_PLACEHOLDER/${CURRENT_DATE}/g" docs/index.html
          
          echo "📋 Copying available reports efficiently..."
          
          # Copy reports with error handling
          copy_report() {
            local src=$1
            local dest=$2
            local name=$3
            
            if [ -e "$src" ]; then
              cp -r "$src" "$dest"
              echo "✅ $name copied"
            else
              echo "ℹ️ $name not available"
              mkdir -p "$dest"
              echo "<html><body><h1>$name Unavailable</h1><p>Report not generated. Check plugin configuration.</p></body></html>" > "$dest/index.html"
            fi
          }
          
          copy_report "target/allure-report" "docs/reports/allure-report" "Allure reports"
          copy_report "target/site/jacoco" "docs/reports/jacoco" "JaCoCo reports"
          
          if [ -f "target/site/surefire-report.html" ]; then
            cp "target/site/surefire-report.html" "docs/reports/"
            echo "✅ Surefire HTML report copied"
          else
            echo "<html><body><h1>Test Report Unavailable</h1><p>No HTML test report generated.</p></body></html>" > "docs/reports/surefire-report.html"
            echo "ℹ️ Surefire HTML report not available"
          fi
          
          echo "🎯 Reports preparation completed"

      - name: 📤 Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs
          retention-days: 30
          
  # =================================================================
  # STAGE 6: Production Deployment
  # =================================================================
  deploy-pages:
    name: 🌐 Deploy to GitHub Pages
    needs: prepare-deployment
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.prepare-deployment.result == 'success'
    runs-on: ubuntu-latest
    
    permissions:
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
      - name: 🔧 Setup GitHub Pages
        id: pages-setup
        uses: actions/configure-pages@v4

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 📄 Generate Deployment Summary
        run: |
          DEPLOY_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
          DEPLOY_DATE=$(date -u '+%B %d, %Y')
          COMMIT_SHORT="${{ github.sha }}"
          COMMIT_SHORT=${COMMIT_SHORT:0:7}
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # 🚀 Production Deployment Summary
          
          ## 📊 Deployment Status
          | Metric | Value |
          |--------|-------|
          | **Status** | ✅ **SUCCESSFUL** |
          | **Environment** | Production (GitHub Pages) |
          | **Deployed** | ${DEPLOY_DATE} |
          | **Build** | #${{ github.run_number }} |
          | **Commit** | [\`${COMMIT_SHORT}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) |
          
          ## 🌐 Available Resources
          - **[📊 Quality Dashboard](${{ steps.deployment.outputs.page_url }})** - Main dashboard
          - **[🧪 Test Results](${{ steps.deployment.outputs.page_url }}/reports/surefire-report.html)** - Unit test reports
          - **[🎯 Coverage Analysis](${{ steps.deployment.outputs.page_url }}/reports/jacoco/)** - Code coverage
          - **[✨ Test Analytics](${{ steps.deployment.outputs.page_url }}/reports/allure-report/)** - Interactive reports
          
          ---
          *Deployed successfully at ${DEPLOY_TIME}*
          EOF